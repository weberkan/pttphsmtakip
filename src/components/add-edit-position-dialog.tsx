"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import type { Position } from "@/lib/types";
import { useEffect } from "react";
import { useToast } from "@/hooks/use-toast";

const positionSchema = z.object({
  name: z.string().min(2, "Position name must be at least 2 characters."),
  department: z.string().min(2, "Department name must be at least 2 characters."),
  employeeName: z.string().min(2, "Employee name must be at least 2 characters."),
  status: z.enum(["permanent", "acting"]),
  reportsTo: z.string().nullable(),
});

type PositionFormData = z.infer<typeof positionSchema>;

interface AddEditPositionDialogProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  positionToEdit?: Position | null;
  allPositions: Position[];
  onSave: (positionData: Omit<Position, 'id'> | Position) => void;
}

export function AddEditPositionDialog({
  isOpen,
  onOpenChange,
  positionToEdit,
  allPositions,
  onSave,
}: AddEditPositionDialogProps) {
  const { toast } = useToast();
  const form = useForm<PositionFormData>({
    resolver: zodResolver(positionSchema),
    defaultValues: {
      name: "",
      department: "",
      employeeName: "",
      status: "permanent",
      reportsTo: null,
    },
  });

  useEffect(() => {
    if (positionToEdit) {
      form.reset({
        name: positionToEdit.name,
        department: positionToEdit.department,
        employeeName: positionToEdit.employeeName,
        status: positionToEdit.status,
        reportsTo: positionToEdit.reportsTo,
      });
    } else {
      form.reset({ // Reset to default for new position
        name: "",
        department: "",
        employeeName: "",
        status: "permanent",
        reportsTo: null,
      });
    }
  }, [positionToEdit, form, isOpen]); // Added isOpen to reset form when dialog opens for new

  const onSubmit = (data: PositionFormData) => {
    if (positionToEdit) {
      onSave({ ...positionToEdit, ...data });
      toast({ title: "Position Updated", description: `"${data.name}" has been successfully updated.` });
    } else {
      onSave(data as Omit<Position, 'id'>); // Cast is safe here as ID is generated by usePositions
      toast({ title: "Position Added", description: `"${data.name}" has been successfully added.` });
    }
    form.reset();
    onOpenChange(false);
  };
  
  const handleDialogClose = (open: boolean) => {
    if (!open) {
      form.reset(); // Reset form when dialog is closed
    }
    onOpenChange(open);
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleDialogClose}>
      <DialogContent className="sm:max-w-[480px]">
        <DialogHeader>
          <DialogTitle>{positionToEdit ? "Edit Position" : "Add New Position"}</DialogTitle>
          <DialogDescription>
            {positionToEdit ? "Update the details of this position." : "Fill in the details for the new position."}
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4 py-2">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Position Name</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., Software Engineer" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="department"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Department</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., Engineering" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="employeeName"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Employee Name</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., John Doe" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="status"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Status</FormLabel>
                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select status" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="permanent">Permanent</SelectItem>
                      <SelectItem value="acting">Acting</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="reportsTo"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Reports To (Optional)</FormLabel>
                  <Select onValueChange={field.onChange} value={field.value || ""} >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select reporting manager" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="">None (Top-level position)</SelectItem>
                      {allPositions
                        .filter(p => p.id !== positionToEdit?.id) // Prevent self-reporting
                        .map(p => (
                          <SelectItem key={p.id} value={p.id}>
                            {p.name} ({p.employeeName})
                          </SelectItem>
                        ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <DialogFooter className="pt-4">
              <Button type="button" variant="outline" onClick={() => handleDialogClose(false)}>
                Cancel
              </Button>
              <Button type="submit">
                {positionToEdit ? "Save Changes" : "Add Position"}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
