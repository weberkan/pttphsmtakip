
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() {
      return request.auth != null;
    }

    function isAdmin() {
      // Check if the user is authenticated and if their user document has the 'admin' role.
      // This requires a read to the users collection, which is why user read rules are important.
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rule for the users collection
    match /users/{userId} {
      // Admins can read any user profile. Regular users can only read their own.
      allow read: if isAuth() && (request.auth.uid == userId || isAdmin());
      // A new user can create their own user document upon signup.
      allow create: if isAuth() && request.auth.uid == userId;
      // An admin can update any user profile (e.g., to approve them). A regular user can update their own.
      allow update: if isAuth() && (request.auth.uid == userId || isAdmin());
      // Only admins can delete user profiles.
      allow delete: if isAdmin();
    }

    // Generic rule for data collections:
    // - Any authenticated user can read.
    // - Writes (create, update) are only allowed if the user's UID matches the `lastModifiedBy` field in the document.
    // - Deletes are allowed for any authenticated user. This could be tightened to admin-only if needed.
    function defaultDataRules() {
      return {
        read: isAuth(),
        // On create and update, ensure the `lastModifiedBy` field is set to the current user's UID.
        // This enforces data ownership and tracks changes.
        create: isAuth() && request.resource.data.lastModifiedBy == request.auth.uid,
        update: isAuth() && request.resource.data.lastModifiedBy == request.auth.uid,
        // For simplicity, any authenticated user can delete.
        delete: isAuth()
      };
    }
    
    match /merkez-positions/{docId} {
      allow read: defaultDataRules().read;
      allow create: defaultDataRules().create;
      allow update: defaultDataRules().update;
      allow delete: defaultDataRules().delete;
    }
    
    match /merkez-personnel/{docId} {
      allow read: defaultDataRules().read;
      allow create: defaultDataRules().create;
      allow update: defaultDataRules().update;
      allow delete: defaultDataRules().delete;
    }
    
    match /tasra-positions/{docId} {
      allow read: defaultDataRules().read;
      allow create: defaultDataRules().create;
      allow update: defaultDataRules().update;
      allow delete: defaultDataRules().delete;
    }
    
    match /tasra-personnel/{docId} {
      allow read: defaultDataRules().read;
      allow create: defaultDataRules().create;
      allow update: defaultDataRules().update;
      allow delete: defaultDataRules().delete;
    }
    
    match /talimatlar/{docId} {
      allow read: defaultDataRules().read;
      allow create: defaultDataRules().create;
      allow update: defaultDataRules().update;
      allow delete: defaultDataRules().delete;
    }
    
    match /depposh-files/{docId} {
      allow read: defaultDataRules().read;
      allow create: defaultDataRules().create;
      allow update: defaultDataRules().update;
      allow delete: defaultDataRules().delete;
    }

    // Notifications can be created by any authenticated user.
    // They can only be read, updated (e.g., to mark as read), or deleted by the intended recipient.
    match /notifications/{notificationId} {
      allow read, update, delete: if isAuth() && request.auth.uid == resource.data.recipientUid;
      allow create: if isAuth();
    }
  }
}

    