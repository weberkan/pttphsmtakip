rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- User Rules ---
    match /users/{userId} {
      // A user can read their own profile
      allow read: if request.auth.uid == userId;

      // Anyone can create a user document during signup
      // Rules ensure they cannot set themselves as admin or approved
      allow create: if request.resource.data.isApproved == false
                    && !('role' in request.resource.data);

      // Only an admin can list all users or approve another user by updating them
      allow list, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- Conversation Rules ---
    match /conversations/{conversationId} {
      // Function to check if the requesting user is a valid participant of the conversation
      // by checking if their UID is part of the conversation document's ID (e.g., "uid1_uid2")
      function isConversationMember() {
        let uids = conversationId.split('_');
        return request.auth.uid in uids && uids.size() == 2;
      }

      // Allow read, write (e.g., update lastMessage), and create operations 
      // only if the user is a member of the conversation.
      allow read, write, create: if isConversationMember();

      // --- Message Sub-collection Rules ---
      match /messages/{messageId} {
        // Allow reading messages only if the user is a member of the parent conversation
        allow read: if isConversationMember();
        
        // Allow creating a message only if the user is a member of the conversation
        // AND they are the sender of the message.
        allow create: if isConversationMember() && request.auth.uid == request.resource.data.senderId;
      }
    }

    // --- Merkez Teşkilatı Rules ---
    match /merkez-positions/{docId} {
      allow read, write, delete: if request.auth != null && request.auth.token.email_verified;
    }
    match /merkez-personnel/{docId} {
      allow read, write, delete: if request.auth != null && request.auth.token.email_verified;
    }

    // --- Taşra Teşkilatı Rules ---
    match /tasra-positions/{docId} {
      allow read, write, delete: if request.auth != null && request.auth.token.email_verified;
    }
    match /tasra-personnel/{docId} {
      allow read, write, delete: if request.auth != null && request.auth.token.email_verified;
    }
  }
}
