
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can read other user profiles, but only create/update their own.
    // Admins can do anything to user profiles.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      // Admins can approve users by writing to their doc.
      allow update: if request.auth.uid == userId || (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Any authenticated user can manage position and personnel data.
    // This allows for the collaborative nature of the application.
    match /merkez-positions/{docId} {
      allow read, write: if request.auth != null;
    }
    match /merkez-personnel/{docId} {
      allow read, write: if request.auth != null;
    }
    match /tasra-positions/{docId} {
      allow read, write: if request.auth != null;
    }
    match /tasra-personnel/{docId} {
      allow read, write: if request.auth != null;
    }

    // Only participants can access a conversation and its messages.
    match /conversations/{conversationId} {
      // Allow read/create/update if the user is a participant.
      allow read, update: if request.auth.uid in resource.data.participantUids;
      allow create: if request.auth.uid in request.resource.data.participantUids;
      
      match /messages/{messageId} {
        // Allow read/create if user is a participant of the parent conversation.
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantUids;
      }
    }
  }
}
