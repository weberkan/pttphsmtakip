rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can only read and update their own profile.
    // Admin can read any user profile.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow update: if request.auth != null && request.auth.uid == userId;
      // Allow create for signup, and allow delete for admins.
      allow create: if request.auth != null;
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Admins can manage the user approval list (which is part of the user docs).
    // This is covered by the rule above.

    // Allow logged-in users to read/write to the main data collections.
    // Specific business logic is handled in the app UI (e.g., only admins see delete buttons).
    match /merkez-positions/{docId} {
      allow read, write: if request.auth != null;
    }
    match /merkez-personnel/{docId} {
      allow read, write: if request.auth != null;
    }
    match /tasra-positions/{docId} {
      allow read, write: if request.auth != null;
    }
    match /tasra-personnel/{docId} {
      allow read, write: if request.auth != null;
    }
    match /talimatlar/{docId} {
      allow read, write: if request.auth != null;
    }
    match /depposh-files/{docId} {
      allow read, write: if request.auth != null;
    }
    match /notifications/{docId} {
      allow read, write: if request.auth != null;
    }
    
    // Deny all other writes by default for security. This is a failsafe.
    match /{document=**} {
      allow write: if false;
    }
  }
}
