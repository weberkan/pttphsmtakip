rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // --- User Rules ---
    match /users/{userId} {
      // Any authenticated user can read user profiles for the messaging feature.
      // This is the primary fix for the "Missing or insufficient permissions" error.
      allow get, list: if request.auth != null;
      
      // A user can create their own document on signup.
      // They cannot approve themselves or assign a role.
      allow create: if request.auth.uid == userId 
                    && request.resource.data.isApproved == false 
                    && !('role' in request.resource.data);
      
      // An admin can ONLY update the 'isApproved' field to true.
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                    && request.resource.data.isApproved == true
                    && resource.data.isApproved == false;
    }
    
    // --- Position and Personnel Rules ---
    // Combined rule for both merkez and tasra collections.
    match /{org=merkez,tasra}-{type=positions,personnel}/{docId} {
       allow read, write: if request.auth != null;
    }

    // --- Messaging Rules ---
    match /conversations/{conversationId} {
      function isParticipant() {
        // Checks if the requesting user is in the conversation's participant list.
        return request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantUids;
      }
      
      // A user can list conversations they are part of.
      // This works because the client-side query filters by participantUids,
      // and the 'get' rule below will be checked for each document in the result set.
      allow list: if request.auth != null;
      
      // A user can get or update a conversation they are a participant in.
      allow get, update: if isParticipant();

      // A user can create a conversation if they are one of the participants in the new document.
      allow create: if request.auth.uid in request.resource.data.participantUids;
      
      match /messages/{messageId} {
        // A user can read and create messages in a conversation they are part of.
        allow read, create: if isParticipant();
      }
    }
  }
}
