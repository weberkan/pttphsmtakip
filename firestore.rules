
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAppUser() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAppUser() && request.auth.uid == userId;
    }

    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isAdmin() {
      return isAppUser() && getRole() == 'admin';
    }

    // Users can create their own profile, and can only update their own profile.
    // Admins can do anything. All authenticated users can read user profiles.
    match /users/{userId} {
      allow read: if isAppUser();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Only admins can manage personnel and positions. Authenticated users can read.
    match /merkez-personnel/{docId} {
      allow read: if isAppUser();
      allow write: if isAdmin();
    }
    match /merkez-positions/{docId} {
      allow read: if isAppUser();
      allow write: if isAdmin();
    }
    match /tasra-personnel/{docId} {
      allow read: if isAppUser();
      allow write: if isAdmin();
    }
    match /tasra-positions/{docId} {
      allow read: if isAppUser();
      allow write: if isAdmin();
    }

    // Authenticated users can interact with the Kanban board.
    // Let application logic handle who can do what.
    match /talimatlar/{docId} {
        allow read, write: if isAppUser();
    }

    // Notifications can be created by the system (app logic).
    // Users can update their own notifications (e.g., mark as read). Admins can update any.
    match /notifications/{notificationId} {
      allow read, create: if isAppUser();
      allow update: if isAppUser() && (request.auth.uid == resource.data.recipientUid || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Admins manage Depposh files. Authenticated users can read/download.
    match /depposh-files/{docId} {
      allow read: if isAppUser();
      allow write: if isAdmin();
    }

    // Rules for conversations (messaging)
    match /conversations/{conversationId} {
      // Users can only read/write conversations they are a part of.
      allow read, write: if isAppUser() && request.auth.uid in resource.data.participantUids;
      
      // Allow users to start a new conversation.
      allow create: if isAppUser() && request.auth.uid in request.resource.data.participantUids;

      match /messages/{messageId} {
        // Users can read messages in conversations they are a part of.
        allow read: if isAppUser() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantUids.hasAny([request.auth.uid]);
        // Users can only create messages as themselves.
        allow create: if isAppUser() && request.resource.data.senderId == request.auth.uid;
      }
    }
  }
}
