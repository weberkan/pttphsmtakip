
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      // Ensure the user is authenticated before checking for role
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      // Admins can read all user profiles for management.
      // A user can read their own profile.
      allow read: if request.auth != null && (isAdmin() || request.auth.uid == userId);
      
      // Users can create their own profile during signup.
      allow create: if request.auth.uid == userId;

      // Users can update their own profile. Admins can update any profile.
      allow update: if request.auth != null && (isAdmin() || request.auth.uid == userId);
      
      // Only admins can delete user profiles.
      allow delete: if request.auth != null && isAdmin();
    }
    
    // For specific application collections, allow any authenticated user to read and write.
    // This simplifies operations like updating child positions when a parent is deleted.
    // The UI should enforce who can perform which actions based on roles.
    match /(merkez-personnel|merkez-positions|tasra-personnel|tasra-positions|talimatlar|depposh-files|notifications|conversations)/{docId} {
      allow read, write: if request.auth != null;
    }

    // Special, more secure rule for conversations' subcollection of messages.
    match /conversations/{conversationId}/messages/{messageId} {
        // Only participants of the conversation can read or write messages.
        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantUids;
    }
  }
}
